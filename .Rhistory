doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
doc = rbind.data.frame(doc_CPD, doc_GPR, doc_LAC)
# Regex to capture only numbers
# (including fractions, decimals,
#scientific notation, and integers) and dates
regex_num <- "^(-?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+|-?\\d+(?:/\\d+)?--?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?--?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+--?\\d+[eE][+-]?\\d+|\\d{1,2}-\\d{1,2} [A-Za-z]+ \\d{4}|[A-Za-z]+ \\d{4}|\\d{1,2} [A-Za-z]+ \\d{4}|\\d{4}-\\d{2}-\\d{2})$"
doc$text_check <- grepl(regex_num, doc$Paragraph)
table(doc$text_check, exclude = NULL)
# Filter text with only text
doc <- doc %>%
filter(text_check == FALSE)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
# Regex to match text with less than 5 words
regex_short_text <- "^\\s*\\b\\S+\\b(\\s+\\b\\S+\\b){0,3}\\s*$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
ver <- doc %>%
filter(text_check == TRUE)
write_csv(ver, "~/Dropbox (Personal)/UNICEF/2021 analysis/Qualitative analysis/Results/false_positives.csv")
doc = rbind.data.frame(doc_CPD, doc_GPR, doc_LAC)
# Regex to capture only numbers
# (including fractions, decimals,
#scientific notation, and integers) and dates
regex_num <- "^(-?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+|-?\\d+(?:/\\d+)?--?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?--?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+--?\\d+[eE][+-]?\\d+|\\d{1,2}-\\d{1,2} [A-Za-z]+ \\d{4}|[A-Za-z]+ \\d{4}|\\d{1,2} [A-Za-z]+ \\d{4}|\\d{4}-\\d{2}-\\d{2})$"
doc$text_check <- grepl(regex_num, doc$Paragraph)
table(doc$text_check, exclude = NULL)
# Filter text with only text
doc <- doc %>%
filter(text_check == FALSE)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
# Regex to match text with less than 5 words
regex_short_text <- "^(\\b\\S+\\b\\s*){1,4}$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
doc = rbind.data.frame(doc_CPD, doc_GPR, doc_LAC)
# Regex to capture only numbers
# (including fractions, decimals,
#scientific notation, and integers) and dates
regex_num <- "^(-?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+|-?\\d+(?:/\\d+)?--?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?--?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+--?\\d+[eE][+-]?\\d+|\\d{1,2}-\\d{1,2} [A-Za-z]+ \\d{4}|[A-Za-z]+ \\d{4}|\\d{1,2} [A-Za-z]+ \\d{4}|\\d{4}-\\d{2}-\\d{2})$"
doc$text_check <- grepl(regex_num, doc$Paragraph)
table(doc$text_check, exclude = NULL)
# Filter text with only text
doc <- doc %>%
filter(text_check == FALSE)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
# Regex to match text with less than 5 words
regex_short_text <- "^(\\b\\S+\\b\\s*){1,4}$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
doc = rbind.data.frame(doc_CPD, doc_GPR, doc_LAC)
# Regex to capture only numbers
# (including fractions, decimals,
#scientific notation, and integers) and dates
regex_num <- "^(-?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+|-?\\d+(?:/\\d+)?--?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?--?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+--?\\d+[eE][+-]?\\d+|\\d{1,2}-\\d{1,2} [A-Za-z]+ \\d{4}|[A-Za-z]+ \\d{4}|\\d{1,2} [A-Za-z]+ \\d{4}|\\d{4}-\\d{2}-\\d{2})$"
doc$text_check <- grepl(regex_num, doc$Paragraph)
table(doc$text_check, exclude = NULL)
# Filter text with only text
doc <- doc %>%
filter(text_check == FALSE)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
# Regex to match text with less than 5 words
regex_short_text <- "^(\\S+\\s+){0,3}\\S+$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
ver <- doc %>%
filter(text_check == TRUE)
View(ver)
ver[11, "Paragraph"]
doc = rbind.data.frame(doc_CPD, doc_GPR, doc_LAC)
# Regex to capture only numbers
# (including fractions, decimals,
#scientific notation, and integers) and dates
regex_num <- "^(-?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+|-?\\d+(?:/\\d+)?--?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?--?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+--?\\d+[eE][+-]?\\d+|\\d{1,2}-\\d{1,2} [A-Za-z]+ \\d{4}|[A-Za-z]+ \\d{4}|\\d{1,2} [A-Za-z]+ \\d{4}|\\d{4}-\\d{2}-\\d{2})$"
doc$text_check <- grepl(regex_num, doc$Paragraph)
table(doc$text_check, exclude = NULL)
# Filter text with only text
doc <- doc %>%
filter(text_check == FALSE)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
# Regex to match text with less than 5 words
regex_short_text <- "^\\s*(\\b\\S+\\b\\s*){1,4}$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
doc = rbind.data.frame(doc_CPD, doc_GPR, doc_LAC)
# Regex to capture only numbers
# (including fractions, decimals,
#scientific notation, and integers) and dates
regex_num <- "^(-?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+|-?\\d+(?:/\\d+)?--?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?--?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+--?\\d+[eE][+-]?\\d+|\\d{1,2}-\\d{1,2} [A-Za-z]+ \\d{4}|[A-Za-z]+ \\d{4}|\\d{1,2} [A-Za-z]+ \\d{4}|\\d{4}-\\d{2}-\\d{2})$"
doc$text_check <- grepl(regex_num, doc$Paragraph)
table(doc$text_check, exclude = NULL)
# Filter text with only text
doc <- doc %>%
filter(text_check == FALSE)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
# Regex to match text with less than 5 words
regex_short_text <- "^\\b(\\S+\\s+){0,3}\\S+\\b$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
ver <- doc %>%
filter(text_check == TRUE)
write_csv(ver, "~/Dropbox (Personal)/UNICEF/2021 analysis/Qualitative analysis/Results/false_positives.csv")
doc = rbind.data.frame(doc_CPD, doc_GPR, doc_LAC)
# Regex to capture only numbers
# (including fractions, decimals,
#scientific notation, and integers) and dates
regex_num <- "^(-?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+|-?\\d+(?:/\\d+)?--?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?--?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+--?\\d+[eE][+-]?\\d+|\\d{1,2}-\\d{1,2} [A-Za-z]+ \\d{4}|[A-Za-z]+ \\d{4}|\\d{1,2} [A-Za-z]+ \\d{4}|\\d{4}-\\d{2}-\\d{2})$"
doc$text_check <- grepl(regex_num, doc$Paragraph)
table(doc$text_check, exclude = NULL)
# Filter text with only text
doc <- doc %>%
filter(text_check == FALSE)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
# Regex to match text with less than 5 words
regex_short_text <- "^\b(\w+\b\s*){1,4}$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
# Regex to match text with less than 5 words
regex_short_text <- "^\b(\w+\b\s*){1,4}$"
# Regex to match text with less than 5 words
regex_short_text <- r"^\b(\w+\b\s*){1,4}$"
# Regex to match text with less than 5 words
regex_short_text <- "^\\b(\\w+\\b\\s*){1,4}$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
ver <- doc %>%
filter(text_check == TRUE)
View(ver)
ver <- doc %>%
filter(text_check == FALSE)
View(ver)
# Regex to match text with less than 5 words
regex_short_text <- "^\\b(\\w+\\b\\s*){1,5}$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
ver <- doc %>%
filter(text_check == FALSE)
View(ver)
# Regex to match text with less than 5 words
regex_short_text <- "^\\s*(\\b\\w+\\b\\s*){1,5}$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
ver <- doc %>%
filter(text_check == FALSE)
View(ver)
# Regex to match text with less than 5 words
regex_short_text <- "^\\s*(\\S+\\s*){1,5}$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
ver <- doc %>%
filter(text_check == FALSE)
table(doc$text_check, exclude = NULL)
# Regex to match text with less than 5 words
regex_short_text <- "^\\s*\\b\\S+(\\s+\\b\\S+){0,3}\\s*$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
doc = rbind.data.frame(doc_CPD, doc_GPR, doc_LAC)
# Regex to capture only numbers
# (including fractions, decimals,
#scientific notation, and integers) and dates
regex_num <- "^(-?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+|-?\\d+(?:/\\d+)?--?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?--?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+--?\\d+[eE][+-]?\\d+|\\d{1,2}-\\d{1,2} [A-Za-z]+ \\d{4}|[A-Za-z]+ \\d{4}|\\d{1,2} [A-Za-z]+ \\d{4}|\\d{4}-\\d{2}-\\d{2})$"
doc$text_check <- grepl(regex_num, doc$Paragraph)
table(doc$text_check, exclude = NULL)
# Filter text with only text
doc <- doc %>%
filter(text_check == FALSE)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
# Regex to match text with less than 5 words
regex_short_text <- "^\\b(\\w+\\b\\s*){1,5}$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
doc <- doc %>%
filter(text_check == FALSE)
write_csv(doc, "~/Dropbox (Personal)/UNICEF/2021 analysis/Qualitative analysis/Results/paragraph_a2w_ALL_2023_v2.csv")
doc = rbind.data.frame(doc_CPD, doc_GPR, doc_LAC)
# Regex to capture only numbers
# (including fractions, decimals,
#scientific notation, and integers) and dates
regex_num <- "^(-?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+|-?\\d+(?:/\\d+)?--?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?--?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+--?\\d+[eE][+-]?\\d+|\\d{1,2}-\\d{1,2} [A-Za-z]+ \\d{4}|[A-Za-z]+ \\d{4}|\\d{1,2} [A-Za-z]+ \\d{4}|\\d{4}-\\d{2}-\\d{2}|-?\\d+%|-?\\d*\\.\\d+%)$"
doc$text_check <- grepl(regex_num, doc$Paragraph)
table(doc$text_check, exclude = NULL)
# Filter text with only text
doc <- doc %>%
filter(text_check == FALSE)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
table(doc$text_check, exclude = NULL)
doc = rbind.data.frame(doc_CPD, doc_GPR, doc_LAC)
# Regex to capture only numbers
# (including fractions, decimals,
#scientific notation, and integers) and dates
regex_num <- "^(-?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+|-?\\d+(?:/\\d+)?--?\\d+(?:/\\d+)?|-?\\d*\\.\\d+(?:[eE][+-]?\\d+)?--?\\d*\\.\\d+(?:[eE][+-]?\\d+)?|-?\\d+[eE][+-]?\\d+--?\\d+[eE][+-]?\\d+|\\d{1,2}-\\d{1,2} [A-Za-z]+ \\d{4}|[A-Za-z]+ \\d{4}|\\d{1,2} [A-Za-z]+ \\d{4}|\\d{4}-\\d{2}-\\d{2}|-?\\d+%|-?\\d*\\.\\d+%)$"
doc$text_check <- grepl(regex_num, doc$Paragraph)
table(doc$text_check, exclude = NULL)
# Filter text with only text
doc <- doc %>%
filter(text_check == FALSE)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
# Regex to match text with less than 5 words
regex_short_text <- "^\\b(\\w+\\b\\s*){1,5}$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
doc <- doc %>%
filter(text_check == FALSE)
write_csv(doc, "~/Dropbox (Personal)/UNICEF/2021 analysis/Qualitative analysis/Results/paragraph_a2w_ALL_2023_v2.csv")
doc = rbind.data.frame(doc_CPD, doc_GPR, doc_LAC)
# Regex to capture only numbers
# (including fractions, decimals,
#scientific notation, and integers) and dates
regex_num <- "\\b\\d+(?:/\\d+)?(?:\\.\\d+)?(?:[eE][+-]?\\d+)?%?\\b|\\b(?:\\d{1,2}[-/.]){2}\\d{2,4}\\b"
doc$text_check <- grepl(regex_num, doc$Paragraph)
table(doc$text_check, exclude = NULL)
# Filter text with only text
doc <- doc %>%
filter(text_check == FALSE)
# Regex to match the pattern "*E/ICEF/2014/5." and "**E/ICEF/2014/5."
regex_pattern <- "^\\*{1,2}[A-Z]+/[A-Z]+/\\d+/\\d+\\.$"
# Regex to match text with less than 5 words
regex_short_text <- "^\\b(\\w+\\b\\s*){1,5}$"
# Check for paragraphs that match either regex
doc$text_check <- grepl(regex_pattern, doc$Paragraph) | grepl(regex_short_text, doc$Paragraph)
table(doc$text_check, exclude = NULL)
doc <- doc %>%
filter(text_check == FALSE)
write_csv(doc, "~/Dropbox (Personal)/UNICEF/2021 analysis/Qualitative analysis/Results/paragraph_a2w_ALL_2023_v2.csv")
rm(list=ls())
# Siempre limpiar nuestro environment
rm(list=ls())
# Instalar paquetes
#install.packages("nombre de paquete") # esto solo hacerlo una vez en la vida!!!!!
library(tidyverse) # llamar paquete
#library(survey) #llamar paquete
library(rio)
library(readxl)
library(haven)
library("haven")
install.packages("haven")
install.packages("haven")
setwd("~/Documents/GitHub/Rbasico/labs")
# Donde yo tengo los archivos que estare usando
setwd("~/Documents/GitHub/Rbasico")
# Verificar
getwd()
library(readxl)
out_agecat_reclassifed1_weighted_2021 <- read_excel("files/out_agecat_reclassifed1_weighted_2021.xlsx")
View(out_agecat_reclassifed1_weighted_2021)
data <- read_excel("files/out_agecat_reclassifed1_weighted_2021.xlsx")
data <- read_excel("files/out_agecat_reclassifed1_weighted_2021.xlsx")
View(data)
View(data)
# #Leer libro de excel
data_list <- import_list("files/out_agecat_reclassifed1_weighted_2021.xlsx",
setclass = "data.frame")
View(data_list)
View(data)
age_cat1 = data_list[[1]] #seleccionar primera hoja de calculo
View(age_cat1)
View(data)
data_list$agecat_1 #seleccionar primera hoja de calculo
age_cat1 = data_list$agecat_1 #seleccionar primera hoja de calculo
# Siempre limpiar nuestro environment
rm(list=ls())
# Instalar paquetes
#install.packages("nombre de paquete") # esto solo hacerlo una vez en la vida!!!!!
library(tidyverse) # llamar paquete
#library(survey) #llamar paquete
library(rio)
library(readxl)
library(haven)
# Donde yo tengo los archivos que estare usando
setwd("~/Documents/GitHub/Rbasico")
# Leer dta
# Yo tengo guardada la base aqui:
Antropometria <- read_dta("files/Antropometria.dta")
class(Antropometria)
dim(Antropometria)  #ver dimension de dataframe
colnames(Antropometria) #ver variables que tengo en dataframe
View(Antropometria)
nrow(Antropometria)  #ver cuantas filas
ncol(Antropometria)   # ver cuantas columnas hay
head(Antropometria, n = 10)  #ver los primeros 10 datos
tail(Antropometria, n = 10)  # ver los ultimos 10 datos
length(Antropometria$folio) # examinar una columna
View(Antropometria)
glimpse(Antropometria)
class(Antropometria$sexo)
# numerico a categorico
Antropometria$sexo_char <- rep(NA, nrow(Antropometria))
glimpse(Antropometria)
View(Antropometria)
Antropometria$sexo_char <- as.character(Antropometria$sexo) # cambiar a caracter
class(Antropometria$sexo_char)
Antropometria$sexo_char
# Usar factor
# Ordenando y etiquetando
Antropometria$sexo_fac <- factor(Antropometria$sexo,
levels = c(2,1),
labels = c("M", "H"))
Antropometria$sexo_fac
glimpse(Antropometria)
# Summary statistics ======================================
# Estas funciones vienen predeterminadas en R
# Aplicar a una columna
Antropometria$edad
mean(Antropometria$edad) # para vectores
median(Antropometria$edad)
hist(Antropometria$edad)
par(mar = c(1, 1, 1, 1))
dev.off()
hist(Antropometria$edad)
quantile(Antropometria$edad) # cuartil = default
warnings()
quantile(Antropometria$edad, probs = seq(0, 1, 1/5)) # quintil
sd(Antropometria$edad)
summary(Antropometria$edad)
# Contar observaciones de variables
# funcion table
table(Antropometria$sexo)
table(Antropometria$edad)
table(Antropometria$sexo, exclude = NULL) # tambien categoria de missings
is.na(Antropometria$sexo)
table(is.na(Antropometria$sexo)) # checar missings
# Seleccionar solo las columnas que me interesan
Antropometria[, 1] # seleccionar la primera columna
Antropometria[, 1:4] # seleccionar las primeras 4 columnas
print(Antropometria, n = 10)
print(Antropometria, n = 100000)
# Si quiero guardar los resultados recuerda asignar un nombre
antro_mini <- Antropometria[, c("peso","talla")]
View(antro_mini)
# Seleccionar solo las filas que me interesan
# Paso 1. Establecer caracteristica que deseo
# funcion which:
# input operacion logica (condicion/caracteristica que necesitamos)
# output  un vector logico
which(Antropometria$peso > 60) # cuales filas cumplen mi condicion
View(Antropometria)
View(antro_mini)
# Seleccionar solo las filas que me interesan
# Paso 1. Establecer caracteristica que deseo
# funcion which:
# input operacion logica (condicion/caracteristica que necesitamos)
# output  un vector logico
which(Antropometria$peso > 60) # cuales filas cumplen mi condicion
View(antro_mini)
# Paso 2. Usar estructura para seleccionar valores
Antropometria[which(Antropometria$peso > 60),]
# Paso 3. Si lo deseo guardar nuestro resultado
peso60 <- Antropometria[which(Antropometria$peso > 60),]
View(peso60)
summary(peso60$peso)
#Nota: Podemos usar mas de una operacion logica
#condicion1 & condicion2
# & significa que debe cumplir todas las condiciones
## | significa que puede cumplir cualquiera de las dos condiciones
#condicion1 | condicion2
pesoedad60 <- Antropometria[which(Antropometria$peso > 60 & Antropometria$edad >60),]
summary(pesoedad60$peso)
summary(pesoedad60$edad)
# Crear una nueva variable
Antropometria$mi_imc <- Antropometria$peso/(Antropometria$talla/100)^2
Antropometria$sexo_lab <- rep(NA, nrow(Antropometria)) # esta opcion si recomiendo
glimpse(Antropometria)
# Reescribir variable anterior en funcion a otra columna (sexo)
Antropometria$sexo_lab[Antropometria$sexo == 1] <- "Hombre"
Antropometria$sexo_lab[Antropometria$sexo == 2] <- "Mujer"
#Para checar
data_sexo <- Antropometria[,c("sexo", "sexo_lab")]
View(data_sexo)
table(Antropometria$sexo, exclude = NULL)
table(Antropometria$sexo_lab, exclude = NULL)
# Funcion ifelse (equivalente a lo de arriba)
Antropometria$sexo_lab <- rep(NA, nrow(Antropometria))
Antropometria$sexo_lab <- ifelse(Antropometria$sexo == 1, yes = "Hombre",
no ="Mujer")
Antropometria$sexo_lab <- ifelse(test = Antropometria$sexo == 1, yes = "Hombre",
no ="Mujer")
# Visualmente
data_sexo <- Antropometria[,c("sexo", "sexo_lab")]
View(data_sexo)
#Contando en base grande
table(Antropometria$sexo, exclude = NULL)
table(Antropometria$sexo_lab, exclude = NULL)
Antropometria$edad_cat <- rep(NA, nrow(Antropometria))
#Antropometria$edad_cat <- NA # es equivalente
table(Antropometria$edad_cat, exclude = NULL)
#Antropometria$edad_cat <- NA # es equivalente
table(Antropometria$edad_cat)
#Antropometria$edad_cat <- NA # es equivalente
table(Antropometria$edad_cat, exclude = NULL) # Visualmente
# Reescribir variable anterior en funcion a otra columna (edad)
Antropometria$edad_cat[Antropometria$edad<30] <- "0-20’s"
Antropometria$edad_cat[Antropometria$edad>=30 & Antropometria$edad<40] <- "30’s"
Antropometria$edad_cat[Antropometria$edad>=40 & Antropometria$edad<50] <- "40’s"
Antropometria$edad_cat[Antropometria$edad>=50 & Antropometria$edad<60] <- "50’s"
Antropometria$edad_cat[Antropometria$edad>=60 & Antropometria$edad<70] <- "60’s"
Antropometria$edad_cat[Antropometria$edad>=70 & Antropometria$edad<80] <- "70’s"
Antropometria$edad_cat[Antropometria$edad>=80] <- "80’s +"
# Verificar
table(Antropometria$edad_cat, exclude = NULL)
52596  + 10092   +8644   +6053   +4045   +2608   +1253
ver <- Antropometria[, c("edad","edad_cat")]
View(ver)
glimpse(Antropometria) # visualizar la base de datos
x <- rnorm(10) #un vector de 10 elementos
x
# es lo mismo que
max(x)
x %>% max  # a x aplica la funcion max()
mini_antro2
mini_antro2 <- select(Antropometria, peso, talla)
View(mini_antro2)
mini_antro <- Antropometria[, c("peso", "talla")] #equivalente
# con pipes
mini_antro_pipes <- Antropometria %>% select(peso, talla)
# Seleccionar solo las filas que me interesan
# Paso 1. Establecer caracteristica que deseo
peso60 <- filter(Antropometria, peso > 60)
View(peso60)
summary(peso60$peso)
library(dplyr)
library(tidyverse)
peso60_pipes <- Antropometria %>% filter(peso > 60)
summary(peso60_pipes)
summary(peso60_pipes$peso)
filter(Antropometria, peso > 60 & edad >60)
#Nota: Podemos usar mas de una operacion logica
# & significa que debe cumplir todas las condiciones
## | significa que puede cumplir cualquiera de las dos condiciones
pesoedad60 <- filter(Antropometria, peso > 60 & edad >60)
pesoedad60 <- filter(Antropometria, peso > 60, edad >60) #equivalente
pesoedad60 <- filter(Antropometria, peso > 60 & edad >60)
pesoedad60 <- filter(Antropometria, peso > 60, edad >60) #equivalente
# es equivalente a
pesoedad60 <- Antropometria[Antropometria$peso > 60 & Antropometria$edad >60, ]
apesoedad60 <- filter(Antropometria, peso > 60 | edad >60) # al menos una
View(apesoedad60)
# Con base R
# Inicializar una variable vacia
Antropometria$tres <- rep(NA, nrow(Antropometria))
Antropometria$tres <- 3
glimpse(Antropometria$tres)
glimpse(Antropometria)
# Base de datos         # nueva columna
Antropometria <- mutate(Antropometria, dos = 2)
glimpse(Antropometria)
Antropometria %>% mutate(uno = 1)
glimpse(Antropometria)
Antropometria %>% mutate(uno = 1)
glimpse(Antropometria)
# Crear una nueva variable en funcion a otras
Antropometria <- mutate(Antropometria, mi_imc = peso/((talla)/100)^2)
glimpse(Antropometria)
# Crear una nueva variable en funcion a otras
Antropometria <- mutate(Antropometria, mi_imc = peso/((talla)/100)^2)
glimpse(Antropometria)
Antropometria$mi_imc <- Antropometria$peso/(Antropometria$talla/100)^2
# con pipes
Antropometria <- Antropometria %>% mutate(mi_imc2 = peso/((talla)/100)^2)
glimpse(Antropometria)
# Funcion case_when
Antropometria <- mutate(Antropometria,
sexo_lab2 = case_when(sexo == 1 ~ "Hombre",
sexo == 2 ~"Mujer"))
glimpse(Antropometria)
# Podemos usar case_when para mas de una categoria
Antropometria <- mutate(Antropometria,
edad_cat2 = case_when(edad < 20 ~ "0-20s",
edad >= 20 & edad <50 ~ "Adultez",
edad >= 50 ~ "50+"))
glimpse(Antropometria)
Antropometria <- Antropometria %>%
mutate(edad_cat_pipe = case_when(edad < 20 ~ "0-20s",
edad >= 20 & edad <50 ~ "Adultez",
edad >= 50 ~ "50+"))
table(Antropometria$edad_cat2, exclude = NULL)
table(Antropometria$edad_cat_pipe, exclude = NULL)
getwd
getwd()
# Exportar datos ======================================
# write
write_dta(mini_antro_pipes, path = "~/Documents/GitHub/Rbasico/mini_antro.dta")
write_csv(mini_antro_pipes, path ="~/Documents/GitHub/Rbasico/mini_antro.csv")
write_csv(mini_antro_pipes, file ="~/Documents/GitHub/Rbasico/mini_antro.csv")
# save
save(mini_antro_pipes, file = "~/Documents/GitHub/Rbasico/mini_antro.rda")
# Para leer formato rda
load("~/Documents/GitHub/Rbasico/mini_antro.rda")
