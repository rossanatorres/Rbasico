vector = c(1:10)
vector
is.numeric(vector)
if(is.numeric(vector)){
print("El vector es numerico")
} else {
print("El vector no es numerico")
}
if(is.numeric(vector)){
print("El vector es numerico")
} else {
print("El vector no es numerico")
}
vectorNumerico <- function(vector){
if(is.numeric(vector)){
print("El vector es numerico")
} else {
print("El vector no es numerico")
}
}
x <- c(1,2,3)
x
y <- c("Rossana", "Torres")
z <- c(TRUE, FALSE, NA)
vectorNumerico(vector = x)
vectorNumerico(vector = y)
vectorNumerico(vector =z)
# Ejemplo
numero <- -5
if(numero < 0){
print("El numero es negativo")
} else if(numero == 0){
print("El numero es cero")
} else{
print("El numero es positivo")
}
numero < 0
is.numeric(vector)
# Ejemplo
numero <- -5
if(numero < 0){
print("El numero es negativo")
} else if(numero == 0){
print("El numero es cero")
} else{
print("El numero es positivo")
}
# Ejemplo de algo que NO FUNCIONA
x = 1:10
x > 1
vector
is.na(vector)
is.numeric(vector)
# Ejemplo de algo que NO FUNCIONA
x = 1:10
x > 1
# Ejemplo de algo que NO FUNCIONA
x = 1:10
if(x > 1){
print("X es mayor que 1")
} else {
print("X es menor que 1")
}
# Ejemplo facil:
vector <- c("Rossana", "Torres", "Alvarez")
vector[1]
vector[2]
length(vector)
1:3
vector[1]
vector[2]
vector[3]
for (elemento in 1:length(vector)) {
print(vector[i])
}
for (elemento in 1:length(vector)) {
print(vector[elemento])
}
elemento = 1
print(vector[elemento])
elemento = 1
print(vector[elemento])
elemento = 2
print(vector[elemento])
x
x = -10:10
1:length(x)
x
x[1] > 1
x[2] > 1
x[3] > 1
x = -10:10
for (i in 1:length(x)) {
if(x[i] > 1){
print("X es mayor que 1")
} else {
print("X es menor que 1")
}
}
x <- 1:10
x^(2)
x <- 1:10
x <- 1:10
x
x <- 1:10
x
for (i in 1:length(x)) {
x[i] <- x[i]^2
}
x
# Problema: Calcular la mediana de cada columna
df <- data.frame(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
median(df$a)
View(df)
median(df$a)
median(df$b)
median(df$c)
median(df$d)
median(df$a)
median(df$b)
median(df$c)
median(df$d)
medianas_manual <- c(median(df$a), median(df$b),
median(df$c), median(df$d))
medianas <- c()
class(medianas)
medianas
1:ncol(df)
df[,1]
df[,2]
df[,3]
medianas_loop <- c()
medianas_loop <- c()
medianas_loop <- c()
for (columna in 1:ncol(df)) {
#col <- 2
print(median(df[,columna]))
#medianas_loop[columna] <- median(df[,columna])
}
medianas_loop <- c(NA, NA, NA, NA)
medianas_loop <- c()
columna <- 1
medianas_loop[columna] <- median(df[,columna])
columna <- 1
median(df[,columna])
columna <- 2
median(df[,columna])
columna <- 3
median(df[,columna])
columna <- 4
median(df[,columna])
columna <- 5
median(df[,columna])
medianas_loop <- c(NA, NA, NA, NA)
medianas_loop <- c()
medianas_loop <- c(NA, NA, NA, NA)
length(medianas_loop)
for (columna in 1:ncol(df)) {
#columna <- 1
#median(df[,columna])
medianas_loop[columna] <- median(df[,columna])
}
medianas_loop
medianas_loop <- c(NA, NA, NA, NA, NA, NA)
for (columna in 1:ncol(df)) {
#columna <- 1
#median(df[,columna])
medianas_loop[columna] <- median(df[,columna])
}
medianas_loop
#medianas_loop <- c(NA, NA, NA, NA, NA, NA)
medianas_loop <- c()
for (columna in 1:ncol(df)) {
#columna <- 1
#median(df[,columna])
medianas_loop[columna] <- median(df[,columna])
}
medianas_loop
f3 <- function(x, y) {
rep(y, length.out = length(x))
}
x = c(1:10)
y = c(1:20)
f3(x, y)
#install.packages("nycflights13") # Esto solo se hace una vez en la vida!!
library(nycflights13)
# Inspecciono
class(flights)
# Cambio a dataframe
flights_df <- data.frame(flights)
tipo <- c()
print(tipo)
for (col in 1:ncol(flights_df)) {
tipo[col] <- (class(flights_df[,col]))
}
# Verificar
print(tipo)
record_numb <- c(1,1,1,2,2,2)
col_a <- c(123,'','',987,'','')
col_b <- c('','234','','','765','')
col_c <- c('','','543','','','543')
df <- data.frame(record_numb,col_a,col_b,col_c)
library(data.table)
setDT(df)
df <- data.table(record_numb,col_a,col_b,col_c)
df[, lapply(.SD, paste0, collapse=""), by=record_numb]
View(df)
glimpse(df)
rm(list=ls())
library(tidyverse)
library(survey)
library(haven)
library(readstata13)
# Antropometria**********
# Yo tengo la base guardada aqui
Antropometria <- read_stata("~/Documents/GitHub/Rbasico/files/Antropometria.dta")
# Crear mi identificador
Antropometria$identifier <- factor(paste0("folio_",
Antropometria$folio,
"__intp_",
Antropometria$intp))
Antropometria <- Antropometria %>%
mutate(imc = peso/(talla/100)^2,
imc_cat = case_when(imc < 18.5 ~ "Bajo peso",
imc >= 18.5 & imc < 25 ~ "Normal",
imc >= 25 & imc < 30 ~ "Sobrepeso",
imc >= 30  ~ "Obesidad"))
Antropometria$imc_cat <- factor(Antropometria$imc_cat,
levels = c("Bajo peso",
"Normal",
"Sobrepeso",
"Obesidad"))
table(Antropometria$imc_cat, exclude = NULL)
# Limpiar NAs
Antropometria <- Antropometria %>%
drop_na(pondef)
mydesign <- svydesign(id = ~ identifier,
strata = ~est_var,
weights = ~pondef ,
PSU = ~code_upm, data = Antropometria)
options(survey.lonely.psu = "adjust")
View(mydesign)
glimpse(Antropometria)
# Ejemplo funcion svymean =========================
svymean(~peso, design = mydesign)
mean(Antropometria$peso)
class(svymean(~peso, design = mydesign))
mi_media <- svymean(~peso, design = mydesign)
mi_media
dim(mi_media)
length(mi_media)
# Extraer elementos de objeto svystat
mi_media[1]
mi_media[[1]]
mi_media[2]
# Usando wrappers
coef(mi_media)
SE(mi_media)
mi_media
attr(mi_media, "var")
confint(svymean(~peso, design = mydesign))
confint(mi_media)
CI <- confint(mi_media)
class(CI)
class(CI)
dim(CI)
CI[,1]
# Categorias de sexo numericas
svymean(~sexo, design = mydesign)
# Correcto
svymean(~factor(sexo), design = mydesign)
# Mas de dos categorias
svymean(~imc_cat, design = mydesign)
confint(svymean(~imc_cat, design = mydesign))
# Opcion 1. Estimar por sexo separado y pegar a mano en tabla
svymean(~factor(imc_cat), design = subset(mydesign, sexo == 1))
confint(svymean(~factor(imc_cat), design = subset(mydesign, sexo == 1)))
svymean(~factor(imc_cat), design = subset(mydesign, sexo == 2))
confint(svymean(~factor(imc_cat), design = subset(mydesign, sexo == 2)))
# Opcion 2. Usar svby para estimar ambos sexos en un comando y pegar a mano
svyby(~imc_cat, by = ~factor(sexo), FUN = svymean,
design = mydesign,
na.rm.all = TRUE)
class(imctab)
imctab<- svyby(~imc_cat, by = ~factor(sexo), FUN = svymean,
design = mydesign,
na.rm.all = TRUE)
View(imctab)
View(imctab)
class(imctab)
View(imctab)
table <- data.frame("IMC_cat" = c("Bajo peso",
"Normal",
"Sobrepeso",
"Obesidad"),
"Hombres" = NA, "Mujeres" = NA)
View(table)
colnames <- c("Hombres", "Mujeres")
for (sex in 1:2) {
#sex <- 1
table[, colnames[sex]] <- (coef(svymean(~factor(imc_cat),
design = subset(mydesign,
sexo == sex))))*100
}
View(table)
# Hacer una nueva tabla con intervalos de confianza
tableCI <- data.frame("IMC_cat" = c("Bajo peso",
"Normal",
"Sobrepeso",
"Obesidad"),
"hombres_prop" = NA,
"hombres_lower" = NA,
"hombres_upper" = NA,
"mujeres_prop" = NA,
"mujeres_lower" = NA,
"mujeres_upper" = NA)
View(tableCI)
prop_names <- c("hombres_prop", "mujeres_prop")
lower_names <- c("hombres_lower", "mujeres_lower")
upper_names <- c("hombres_upper", "mujeres_upper")
for (sex in 1:2) {
# Tabla de antes
tableCI[, prop_names[sex]] <- coef(svymean(~factor(imc_cat),
design = subset(mydesign,
sexo == sex)))
tableCI[, lower_names[sex]] <- confint(svymean(~factor(imc_cat),
design = subset(mydesign,
sexo == sex)))[,1]
tableCI[, upper_names[sex]] <- confint(svymean(~factor(imc_cat),
design = subset(mydesign,
sexo == sex)))[,2]
}
View(tableCI)
# Darle formato a numeros
tableCIformatted <- tableCI %>%
mutate(across(where(is.numeric),
function(x) x * 100)) %>%
mutate_if(is.numeric, round, 1) %>%
mutate(Hombres = paste0(hombres_prop, " (",
hombres_lower, ", ",
hombres_upper, ")"),
Mujeres = paste0(mujeres_prop, " (",
mujeres_lower, ", ",
mujeres_upper, ")")) %>%
select(IMC_cat, Hombres, Mujeres)
View(tableCIformatted)
# Opcion 3. Manipular objetos con dplyr
imctabWide <- svyby(~imc_cat, by = ~factor(sexo), FUN = svymean,
design = mydesign,
na.rm.all = TRUE)
View(imctabWide)
imctabLong <- imctabWide %>%
select("factor(sexo)", starts_with("imc_cat")) %>%
pivot_longer(starts_with("imc_cat"),
names_to = "imc_cat",
values_to = "mean")
View(imctabLong)
View(imctabLong)
imctabfinalWide <- imctabLong %>%
pivot_wider(names_from = "factor(sexo)",
values_from = "mean")
View(imctabfinalWide)
imctabCI <- confint(svyby(~imc_cat, by = ~factor(sexo),
FUN = svymean, design = mydesign,
na.rm.all = TRUE))
imctabCILong <- data.frame(imctabCI) %>%
rownames_to_column() %>%
mutate(sexo = rep(c(1,2), 4))
imctabCILong[imctabCILong$sexo ==1, c(2,3)]
imctabHombres <- cbind(imctabfinalWide[,2], imctabCILong[imctabCILong$sexo ==1, c(2,3)])
imctabMujeres <- cbind(imctabfinalWide[,3], imctabCILong[imctabCILong$sexo ==2, c(2,3)])
imctabboth <- cbind("IMC_cat" = c("Bajo peso",
"Normal",
"Sobrepeso",
"Obesidad"),
imctabHombres,imctabMujeres)
names(imctabboth) <- names(tableCI)
tableBothformatted <- imctabboth %>%
mutate(across(where(is.numeric),
function(x) x * 100)) %>%
mutate_if(is.numeric, round, 1) %>%
mutate(Hombres = paste0(hombres_prop, " (",
hombres_lower, ", ",
hombres_upper, ")"),
Mujeres = paste0(mujeres_prop, " (",
mujeres_lower, ", ",
mujeres_upper, ")")) %>%
select(IMC_cat, Hombres, Mujeres)
View(tableBothformatted)
rm(list=ls())
library(tidyverse)
library(survey)
library(haven)
library(readstata13)
library(gtsummary)
# Antropometria**********
# Yo tengo la base guardada aqui
Antropometria <- read_stata("~/Documents/GitHub/Rbasico/files/Antropometria.dta")
# Crear mi identificador
Antropometria$identifier <- factor(paste0("folio_",
Antropometria$folio,
"__intp_",
Antropometria$intp))
Antropometria <- Antropometria %>%
mutate(imc = peso/(talla/100)^2,
imc_cat = case_when(imc < 18.5 ~ "Bajo peso",
imc >= 18.5 & imc < 25 ~ "Normal",
imc >= 25 & imc < 30 ~ "Sobrepeso",
imc >= 30  ~ "Obesidad"))
Antropometria$imc_cat <- factor(Antropometria$imc_cat,
levels = c("Bajo peso",
"Normal",
"Sobrepeso",
"Obesidad"))
table(Antropometria$imc_cat, exclude = NULL)
# IMPORTANTE TENER TODAS LAS VARIABLES QUE VOY A USAR
# ANTES DE CREAR MI DISENO
table(is.na(Antropometria$pondef))
Antropometria <- Antropometria %>%
drop_na(pondef)
# REMOVER TODAS LAS ETIQUETAS!!!!!!!!!!!!!!
Antropometria<-haven::zap_labels(Antropometria)
Antropometria <- Antropometria %>%
mutate(sexo_lab = case_when(sexo == 1~ "Hombre",
sexo == 2 ~ "Mujer"))
antro_mini <- select(Antropometria,
edad, sexo_lab, peso, talla, imc_cat)
antro_mini %>%
tbl_summary()
# Podemos personalizar nuestra tabla facilmente
# Cambiar nombres de filas
antro_mini %>%
tbl_summary(label = list(edad ~ "Edad",
sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"))
# Cambiar la estadistica
antro_mini %>%
tbl_summary(label = list(edad ~ "Edad",
sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"),
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)"
))
# Darle formato a los numeros
antro_mini %>%
tbl_summary(label = list(edad ~ "Edad",
sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"),
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)"
),
digits = everything() ~ 1)
antro_mini %>%
tbl_summary(by = sexo_lab,
label = list(edad ~ "Edad",
#sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"),
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)"
),
digits = everything() ~ 1)
antro_mini_svy <- Antropometria %>%
select(sexo_lab, imc_cat, identifier, code_upm, pondef, est_var)
View(antro_mini_svy)
View(antro_mini)
View(antro_mini_svy)
# En vez de la base, aplicare la funcion tbl_svysummary  a
# mi diseno muestral
options(survey.lonely.psu = "adjust")
survey::svydesign(ids = ~identifier,
strata=~est_var,
weights = ~pondef,
data=antro_mini_svy)%>%
tbl_svysummary(by = "sexo_lab",
include = c(imc_cat),
label = imc_cat ~ "Categoria de IMC",
digits = everything() ~ 1)
tbl <- survey::svydesign(ids = ~identifier,
strata=~est_var,
weights = ~pondef,
data=antro_mini_svy)%>%
tbl_svysummary(by = "sexo_lab",
include = c(imc_cat),
label = imc_cat ~ "Categoria de IMC",
digits = everything() ~ 1)
View(tbl)
# Usar paquete flextable
tbl %>%
as_flex_table() %>%
flextable::set_table_properties(layout = "autofit",
opts_word = list(split = TRUE)) %>%
flextable::save_as_docx(path = "mitablalinda.docx") # R plots or graphic files (png, pdf and jpeg) and HTML, Word, PDF and PowerPoint
tbl %>%
as_flex_table() %>%
flextable::set_table_properties(layout = "autofit", opts_word = list(split = TRUE)) %>%
flextable::save_as_pptx(path = "mitablalinda.pptx") # R plots or graphic files (png, pdf and jpeg) and HTML, Word, PDF and PowerPoint
