flextable::set_table_properties(layout = "autofit",
opts_word = list(split = TRUE)) %>%
flextable::save_as_docx(path = "mitablalinda.docx") # R plots or graphic files (png, pdf and jpeg) and HTML, Word, PDF and PowerPoint
rm(list=ls())
library(tidyverse)
library(survey)
library(haven)
library(readstata13)
# install.packages("gtsummary")
library(gtsummary)
# Antropometria**********
# Yo tengo la base guardada aqui
Antropometria <- read_stata("~/Documents/GitHub/Rbasico/files/Antropometria.dta")
# Crear mi identificador
Antropometria$identifier <- factor(paste0("folio_",
Antropometria$folio,
"__intp_",
Antropometria$intp))
Antropometria <- Antropometria %>%
mutate(imc = peso/(talla/100)^2,
imc_cat = case_when(imc < 18.5 ~ "Bajo peso",
imc >= 18.5 & imc < 25 ~ "Normal",
imc >= 25 & imc < 30 ~ "Sobrepeso",
imc >= 30  ~ "Obesidad"))
Antropometria$imc_cat <- factor(Antropometria$imc_cat,
levels = c("Bajo peso",
"Normal",
"Sobrepeso",
"Obesidad"))
table(Antropometria$imc_cat, exclude = NULL)
# IMPORTANTE TENER TODAS LAS VARIABLES QUE VOY A USAR
# ANTES DE CREAR MI DISENO
table(is.na(Antropometria$pondef))
Antropometria <- Antropometria %>%
drop_na(pondef)
# REMOVER TODAS LAS ETIQUETAS!!!!!!!!!!!!!!
# Lo necesitamos porque gtsummary no
# funciona con variables etiquetadas
Antropometria<-haven::zap_labels(Antropometria)
# Nota: la linea paquete::funcion, sirve para
# cargar una funcion directamente de un paquete
# sin tener que cargar todo el paquete o cuando
# una funcion tiene el mismo nombre en diferentes
# paquetes y estoy usando ambos paquetes al mismo
# tiempo, entonces tengo que especificar
# cual funcion y de cual paquete quiero usar
Antropometria <- Antropometria %>%
mutate(sexo_lab = case_when(sexo == 1~ "Hombre",
sexo == 2 ~ "Mujer"))
# Usar el paquete gtsummary ============================
# install.packages("survey") # Recuerda que esto solo se instala una vez!!
library(gtsummary)
antro_mini <- select(Antropometria,
edad, sexo_lab,
peso, talla, imc_cat)
antro_mini %>%
tbl_summary()
# Podemos personalizar nuestra tabla facilmente
# Cambiar nombres de filas
antro_mini %>%
tbl_summary(label = list(edad ~ "Edad",
sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"))
# Cambiar la estadistica
antro_mini %>%
tbl_summary(label = list(edad ~ "Edad",
sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"),
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)"
))
# Darle formato a los numeros
antro_mini %>%
tbl_summary(label = list(edad ~ "Edad",
sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"),
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)"
),
digits = everything() ~ 1)
# Dividir las estadisticas en algun grupo
antro_mini %>%
tbl_summary(by = sexo_lab,
label = list(edad ~ "Edad",
#sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"),
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)"
),
digits = everything() ~ 1)
#Muy bonito pero y el diseno muestral?
antro_mini_svy <- Antropometria %>%
select(sexo_lab, imc_cat, code_upm, pondef, est_var)
# En vez de la base, aplicare la funcion tbl_svysummary  a
# mi diseno muestral
options(survey.lonely.psu = "adjust")
survey::svydesign(ids = ~code_upm,
strata=~est_var,
weights = ~pondef,
data=antro_mini_svy)%>%
tbl_svysummary(by = "sexo_lab",
include = c(imc_cat),
label = imc_cat ~ "Categoria de IMC",
digits = everything() ~ 1)
# Muy bonito pero y donde guardo mi tabla o que?
tbl <- survey::svydesign(ids = ~code_upm,
strata=~est_var,
weights = ~pondef,
data=antro_mini_svy)%>%
tbl_svysummary(by = "sexo_lab",
include = c(imc_cat),
label = imc_cat ~ "Categoria de IMC",
digits = everything() ~ 1)
# Usar paquete flextable
# Para instalar:
# install.packages("flextable")
library(flextable)
tbl %>%
as_flex_table() %>%
flextable::set_table_properties(layout = "autofit",
opts_word = list(split = TRUE)) %>%
flextable::save_as_docx(path = "mitablalinda.docx") # R plots or graphic files (png, pdf and jpeg) and HTML, Word, PDF and PowerPoint
tbl %>%
as_flex_table() %>%
flextable::set_table_properties(layout = "autofit", opts_word = list(split = TRUE)) %>%
flextable::save_as_pptx(path = "mitablalinda.pptx") # R plots or graphic files (png, pdf and jpeg) and HTML, Word, PDF and PowerPoint
setwd("~/Documents/GitHub/Rbasico")
class(tbl)
# Usar paquete flextable
# Para instalar:
# install.packages("flextable")
library(flextable)
tbl %>%
as_flex_table() %>%
flextable::set_table_properties(layout = "autofit",
opts_word = list(split = TRUE)) %>%
flextable::save_as_docx(path = "mitablalinda.docx") # R plots or graphic files (png, pdf and jpeg) and HTML, Word, PDF and PowerPoint
tbl %>%
as_flex_table() %>%
flextable::set_table_properties(layout = "autofit", opts_word = list(split = TRUE)) %>%
flextable::save_as_pptx(path = "mitablalinda.pptx") # R plots or graphic files (png, pdf and jpeg) and HTML, Word, PDF and PowerPoint
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(survey)
library(haven)
library(readstata13)
# install.packages("gtsummary")
library(gtsummary)
Antropometria <- read_stata("~/Documents/GitHub/Rbasico/files/Antropometria.dta")
Antropometria<-haven::zap_labels(Antropometria)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(survey)
library(haven)
library(readstata13)
# install.packages("gtsummary")
library(gtsummary)
Antropometria <- read_stata("~/Documents/GitHub/Rbasico/files/Antropometria.dta")
Antropometria<-haven::zap_labels(Antropometria)
# Paquete survey ======================================
#install.packages("survey") # Recuerda que esto solo se instala una vez!!
rm(list=ls())
library(tidyverse)
library(survey)
library(haven)
library(readstata13)
# Antropometria**********
# Yo tengo la base guardada aqui
Antropometria <- read_stata("~/Documents/GitHub/Rbasico/files/Antropometria.dta")
# Crear mi identificador
Antropometria$identifier <- factor(paste0("folio_",
Antropometria$folio,
"__intp_",
Antropometria$intp))
Antropometria <- Antropometria %>%
mutate(imc = peso/(talla/100)^2,
imc_cat = case_when(imc < 18.5 ~ "Bajo peso",
imc >= 18.5 & imc < 25 ~ "Normal",
imc >= 25 & imc < 30 ~ "Sobrepeso",
imc >= 30  ~ "Obesidad"))
Antropometria$imc_cat <- factor(Antropometria$imc_cat,
levels = c("Bajo peso",
"Normal",
"Sobrepeso",
"Obesidad"))
table(Antropometria$imc_cat, exclude = NULL)
# IMPORTANTE TENER TODAS LAS VARIABLES QUE VOY A USAR
# ANTES DE CREAR MI DISENO
table(is.na(Antropometria$pondef))
# Limpiar NAs
Antropometria <- Antropometria %>%
drop_na(pondef)
mydesign <- svydesign(id = ~code_upm,
strata = ~est_var,
weights = ~pondef,
data = Antropometria)
options(survey.lonely.psu = "adjust")
# Ejemplo funcion svymean =========================
svymean(~peso, design = mydesign)
mean(Antropometria$peso)
weighted_mean <- sum(Antropometria$peso * Antropometria$pondef) / sum(Antropometria$pondef)
weighted_mean
mi_media <- svymean(~peso, design = mydesign)
mi_media
class(mi_media)
# Extraer elementos de objeto svystat
mi_media[1]
mi_media[[1]]
mi_media[2]
# Usando wrappers
# Extraigo mi estimador central
coef(mi_media)
# Extraigo mi SE
SE(mi_media)
# Funcion para estimar intervalos de confianza
confint(mi_media)
# lo mismo
confint(svymean(~peso, design = mydesign))
CI <- confint(mi_media)
class(CI)
dim(CI)
# Hay que tener cuidado con los objetos!!!!
# Estimar proporcion por categorias ======================
# Categorias de sexo numericas
svymean(~sexo, design = mydesign)
# Correcto
svymean(~factor(sexo), design = mydesign)
# Opcion para variables binarias
# como mi variable sexo es 1 y 2 y no 0 y 1 uso la siguiente
# formula
svyciprop(~I(sexo == 1), design = mydesign)
svyciprop(~I(sexo == 2), design = mydesign)
# Mas de dos categorias
svymean(~imc_cat, design = mydesign)
confint(svymean(~imc_cat, design = mydesign))
# Problema que quiero resolver:
# Hacer una tabla con la proporcion de categorias de imc por sexo
disenoHombres = subset(mydesign, sexo == 1)
# Opcion 1. Estimar por sexo separado y pegar a mano en tabla
svymean(~factor(imc_cat), design = disenoHombres)
confint(svymean(~factor(imc_cat), design = subset(mydesign, sexo == 1)))
svymean(~factor(imc_cat), design = subset(mydesign, sexo == 2))
confint(svymean(~factor(imc_cat), design = subset(mydesign, sexo == 2)))
# Opcion 2. Usar svby para estimar ambos sexos en un comando y pegar a mano
svyby(~imc_cat, by = ~factor(sexo), FUN = svymean,
design = mydesign,
na.rm.all = TRUE)
imctab<- svyby(~imc_cat, by = ~factor(sexo), FUN = svymean,
design = mydesign,
na.rm.all = TRUE)
class(imctab)
# Opcion 3. Crear mi propio for loop
table <- data.frame("IMC_cat" = c("Bajo peso",
"Normal",
"Sobrepeso",
"Obesidad"),
"Hombres" = NA, "Mujeres" = NA)
colnames <- c("Hombres", "Mujeres")
for (sex in 1:2) {
#sex <- 1
table[, colnames[sex]] <- (coef(svymean(~factor(imc_cat),
design = subset(mydesign,
sexo == sex))))*100
}
# Muy bonito pero nos hacen falta los invervalos de confianza
# Hacer una nueva tabla con intervalos de confianza
tableCI <- data.frame("IMC_cat" = c("Bajo peso",
"Normal",
"Sobrepeso",
"Obesidad"),
"hombres_prop" = NA,
"hombres_lower" = NA,
"hombres_upper" = NA,
"mujeres_prop" = NA,
"mujeres_lower" = NA,
"mujeres_upper" = NA)
prop_names <- c("hombres_prop", "mujeres_prop")
lower_names <- c("hombres_lower", "mujeres_lower")
upper_names <- c("hombres_upper", "mujeres_upper")
for (sex in 1:2) {
# Tabla de antes
tableCI[, prop_names[sex]] <- coef(svymean(~factor(imc_cat),
design = subset(mydesign,
sexo == sex)))
tableCI[, lower_names[sex]] <- confint(svymean(~factor(imc_cat),
design = subset(mydesign,
sexo == sex)))[,1]
tableCI[, upper_names[sex]] <- confint(svymean(~factor(imc_cat),
design = subset(mydesign,
sexo == sex)))[,2]
}
# Darle formato a numeros
tableCIformatted <- tableCI %>%
mutate(across(where(is.numeric),
function(x) x * 100)) %>%
mutate_if(is.numeric, round, 1) %>%
mutate(Hombres = paste0(hombres_prop, " (",
hombres_lower, ", ",
hombres_upper, ")"),
Mujeres = paste0(mujeres_prop, " (",
mujeres_lower, ", ",
mujeres_upper, ")")) %>%
select(IMC_cat, Hombres, Mujeres)
# Opcion 3. Manipular objetos con dplyr
imctabWide <- svyby(~imc_cat, by = ~factor(sexo), FUN = svymean,
design = mydesign,
na.rm.all = TRUE)
imctabLong <- imctabWide %>%
select("factor(sexo)", starts_with("imc_cat")) %>%
pivot_longer(starts_with("imc_cat"),
names_to = "imc_cat",
values_to = "mean")
imctabfinalWide <- imctabLong %>%
pivot_wider(names_from = "factor(sexo)",
values_from = "mean")
# Muy bonito pero nos hacen falta los invervalos de confianza
imctabCI <- confint(svyby(~imc_cat, by = ~factor(sexo),
FUN = svymean, design = mydesign,
na.rm.all = TRUE))
imctabCILong <- data.frame(imctabCI) %>%
rownames_to_column() %>%
mutate(sexo = rep(c(1,2), 4))
imctabCILong[imctabCILong$sexo ==1, c(2,3)]
imctabHombres <- cbind(imctabfinalWide[,2], imctabCILong[imctabCILong$sexo ==1, c(2,3)])
imctabMujeres <- cbind(imctabfinalWide[,3], imctabCILong[imctabCILong$sexo ==2, c(2,3)])
imctabboth <- cbind("IMC_cat" = c("Bajo peso",
"Normal",
"Sobrepeso",
"Obesidad"),
imctabHombres,imctabMujeres)
names(imctabboth) <- names(tableCI)
tableBothformatted <- imctabboth %>%
mutate(across(where(is.numeric),
function(x) x * 100)) %>%
mutate_if(is.numeric, round, 1) %>%
mutate(Hombres = paste0(hombres_prop, " (",
hombres_lower, ", ",
hombres_upper, ")"),
Mujeres = paste0(mujeres_prop, " (",
mujeres_lower, ", ",
mujeres_upper, ")")) %>%
select(IMC_cat, Hombres, Mujeres)
View(tableCIformatted)
rm(list=ls())
library(tidyverse)
library(survey)
library(haven)
library(readstata13)
# install.packages("gtsummary")
library(gtsummary)
setwd("~/Documents/GitHub/Rbasico")
# Antropometria**********
# Yo tengo la base guardada aqui
Antropometria <- read_stata("~/Documents/GitHub/Rbasico/files/Antropometria.dta")
# Crear mi identificador
Antropometria$identifier <- factor(paste0("folio_",
Antropometria$folio,
"__intp_",
Antropometria$intp))
# Crear mi identificador
Antropometria$identifier <- factor(paste0("folio_",
Antropometria$folio,
"__intp_",
Antropometria$intp))
# Crear mi identificador
Antropometria$identifier <- factor(paste0("folio_",
Antropometria$folio,
"__intp_",
Antropometria$intp))
Antropometria <- Antropometria %>%
mutate(imc = peso/(talla/100)^2,
imc_cat = case_when(imc < 18.5 ~ "Bajo peso",
imc >= 18.5 & imc < 25 ~ "Normal",
imc >= 25 & imc < 30 ~ "Sobrepeso",
imc >= 30  ~ "Obesidad"))
Antropometria$imc_cat <- factor(Antropometria$imc_cat,
levels = c("Bajo peso",
"Normal",
"Sobrepeso",
"Obesidad"))
table(Antropometria$imc_cat, exclude = NULL)
# IMPORTANTE TENER TODAS LAS VARIABLES QUE VOY A USAR
# ANTES DE CREAR MI DISENO
table(is.na(Antropometria$pondef))
Antropometria <- Antropometria %>%
drop_na(pondef)
# REMOVER TODAS LAS ETIQUETAS!!!!!!!!!!!!!!
# Lo necesitamos porque gtsummary no
# funciona con variables etiquetadas
Antropometria<-haven::zap_labels(Antropometria)
Antropometria <- Antropometria %>%
mutate(sexo_lab = case_when(sexo == 1~ "Hombre",
sexo == 2 ~ "Mujer"))
# Usar el paquete gtsummary ============================
# install.packages("survey") # Recuerda que esto solo se instala una vez!!
library(gtsummary)
antro_mini <- select(Antropometria,
edad, sexo_lab,
peso, talla, imc_cat)
antro_mini %>%
tbl_summary()
# Podemos personalizar nuestra tabla facilmente
# Cambiar nombres de filas
antro_mini %>%
tbl_summary(label = list(edad ~ "Edad",
sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"))
# Cambiar la estadistica
antro_mini %>%
tbl_summary(label = list(edad ~ "Edad",
sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"),
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)"
))
mean(1:10, na.rm = 10 )
# Darle formato a los numeros
antro_mini %>%
tbl_summary(label = list(edad ~ "Edad",
sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"),
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)"
),
digits = everything() ~ 1)
antro_mini %>%
tbl_summary(by = sexo_lab,
label = list(edad ~ "Edad",
#sexo_lab ~ "Sexo",
peso ~ "Peso (kg)",
talla ~ "Talla (cm)",
imc_cat ~ "Categoria de IMC"),
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} / {N} ({p}%)"
),
digits = everything() ~ 1)
mean(1:10)
antro_mini_svy <- Antropometria %>%
select(sexo_lab, imc_cat, code_upm, pondef, est_var)
options(survey.lonely.psu = "adjust")
survey::svydesign(ids = ~code_upm,
strata=~est_var,
weights = ~pondef,
data=antro_mini_svy)
View(antro_mini)
# En vez de la base, aplicare la funcion tbl_svysummary  a
# mi diseno muestral
options(survey.lonely.psu = "adjust")
survey::svydesign(ids = ~code_upm,
strata=~est_var,
weights = ~pondef,
data=antro_mini_svy)%>%
tbl_svysummary(by = "sexo_lab",
include = c(imc_cat),
label = imc_cat ~ "Categoria de IMC",
digits = everything() ~ 1)
tbl <- survey::svydesign(ids = ~code_upm,
strata=~est_var,
weights = ~pondef,
data=antro_mini_svy)%>%
tbl_svysummary(by = "sexo_lab",
include = c(imc_cat),
label = imc_cat ~ "Categoria de IMC",
digits = everything() ~ 1)
View(tbl)
# Usar paquete flextable
# Para instalar:
# install.packages("flextable")
library(flextable)
tbl %>%
as_flex_table() %>%
flextable::set_table_properties(layout = "autofit",
opts_word = list(split = TRUE)) %>%
flextable::save_as_docx(path = "mitablalinda.docx") # R plots or graphic files (png, pdf and jpeg) and HTML, Word, PDF and PowerPoint
tbl %>%
as_flex_table() %>%
flextable::set_table_properties(layout = "autofit", opts_word = list(split = TRUE)) %>%
flextable::save_as_pptx(path = "mitablalinda.pptx") # R plots or graphic files (png, pdf and jpeg) and HTML, Word, PDF and PowerPoint
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(survey)
library(haven)
library(readstata13)
Antropometria <- read_stata("~/Documents/GitHub/Rbasico/files/Antropometria.dta")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(survey)
library(haven)
library(readstata13)
Antropometria <- read_stata("~/Documents/GitHub/Rbasico/files/Antropometria.dta")
Antropometria<-haven::zap_labels(Antropometria)
